#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;
void Emsawy(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

#define sz(v)			((int)((v).size()))
#define all(v)			((v).begin()), ((v).end())
#define allr(v)			((v).rbegin()), ((v).rend())
#define clr(v,d)		memset(v, d, sizeof(v))
#define sf(x)			scanf("%d", &x)
#define sf2(x,y)		scanf("%d %d", &x, &y)
#define sf3(x,y,z)		scanf("%d %d %d", &x, &y, &z)
#define sfll(x)			scanf("%I64d", &x)
#define sfll2(x,y)		scanf("%I64d %I64d", &x, &y)
#define sfll3(x,y,z)		scanf("%I64d %I64d %I64d", &x, &y, &z)
#define angle(a)		(atan2((a).imag(), (a).real()))
#define vec(a,b)		((b)-(a))
#define length(a)		(hypot((a).imag(), (a).real()))
#define dp(a,b)			((conj(a)*(b)).real()) // if zero prep
#define cp(a,b)			((conj(a)*(b)).imag()) // if zero parl
#define same(p1,p2)		(dp(vec(p1,p2),vec(p1,p2)) <= EPS)
#define rotate0(p,ang)		((p)*exp(Point(0,ang)))
#define rotateA(p,ang,about)	(rotate0(vec(about,p),ang)+about)
#define reflect0(v,m)		(conj((v)/(m))*(m))
#define normalize(a)		(a)/length(a)
#define lengthSqr(p)		dp(p,p)
#define pii			pair<int,int>
#define V			vector
#define MP			make_pair
#define X			real()
#define Y			imag()

typedef complex<double> 	point;
typedef long long ll;

const double PI = acos(-1.0);
const double EPS = 1e-10;
const ll mod = ll(1e9 + 7), oo = ll(1e9);

V<V<pii> > adj;
int n, m, k, t, c;
int g[22][22];

void shortestpath(){
	for (int k = 0; k < n; k++){
		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++){
				g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
			}
		}
	}
}

int dp[20][(1 << 19)][20];
int go(int src, int sub,int sink){
	if (src == sink)
		return (sub == 0 ? 0 : oo);

	int &ret = dp[src][sub][sink];
	if (ret != -1) return ret;
	ret = oo;
	for (int i = 0; i < n; i++){
		if (!((sub >> i) & 1)) continue;
		ret = min(ret, go(i, (sub & ~(1 << i)),sink) + g[src][i]);
	}
	return ret;
}
int er(int msk, int i){
	return (msk & ~(1 << i));
}
bool is(int msk, int i){
	return ((msk >> i) & 1);
}
int main()
{
	Emsawy();
	while (cin >> n >> m){
		int u, v, w;
		for (int i = 0; i < n; i++) for (int j = 0; j < n; j++)g[i][j] = oo;
		for (int i = 0; i < n; i++) g[i][i] = 0;
		for (int i = 0; i < m; i++){
			sf3(u, v, w);
			g[u][v] = min(g[u][v], w);
			g[v][u] = min(g[u][v], w);
		}
		shortestpath();
		clr(dp, -1);
		int src = 0, sink = n - 1, h = (n - 2), fh = h / 2;
		int to = (1 << n) - 1, res = oo;
		for (int msk = 0; msk <= to; msk++){
			V<int>one , zero;
			if (is(msk, src) || is(msk,sink)) continue;

			for (int j = 1; j < n - 1; j++)
				if (is(msk, j))
					one.push_back(j);
				else
					zero.push_back(j);

			if (one.size() != fh) continue;
			
			int A = oo, B = oo;
			for (int i = 0; i < one.size(); i++){
				int a = go(src, msk, one[i]);
				for (int j = 0; j < zero.size(); j++){
					int b = go(one[i], er(er((~msk) & to, src), sink), zero[j]);
					int c = g[zero[j]][sink];
					A = min(A, a + b + c);
				}
			}
			for (int i = 0; i < one.size(); i++){
				int a = go(sink, msk, one[i]);
				for (int j = 0; j < zero.size(); j++){
					int b = go(one[i], er(er((~msk) & to, src), sink), zero[j]);
					int c = g[zero[j]][src];
					B = min(B, a + b + c);
				}
			}
			res = min(res, A + B);
		}
		printf("Case %d: %d\n", ++c, res);
	}
	return 0;
}
