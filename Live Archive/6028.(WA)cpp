#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;
void Emsawy(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

#define sz(v)			((int)((v).size()))
#define all(v)			((v).begin()), ((v).end())
#define allr(v)			((v).rbegin()), ((v).rend())
#define clr(v,d)		memset(v, d, sizeof(v))
#define sf(x)			scanf("%d", &x)
#define sf2(x,y)		scanf("%d %d", &x, &y)
#define sf3(x,y,z)		scanf("%d %d %d", &x, &y, &z)
#define sfll(x)			scanf("%I64d", &x)
#define sfll2(x,y)		scanf("%I64d %I64d", &x, &y)
#define sfll3(x,y,z)		scanf("%I64d %I64d %I64d", &x, &y, &z)
#define angle(a)		(atan2((a).imag(), (a).real()))
#define vec(a,b)		((b)-(a))
#define length(a)		(hypot((a).imag(), (a).real()))
#define dp(a,b)			((conj(a)*(b)).real()) // if zero prep
#define cp(a,b)			((conj(a)*(b)).imag()) // if zero parl
#define same(p1,p2)		(dp(vec(p1,p2),vec(p1,p2)) <= EPS)
#define rotate0(p,ang)		((p)*exp(Point(0,ang)))
#define rotateA(p,ang,about)	(rotate0(vec(about,p),ang)+about)
#define reflect0(v,m)		(conj((v)/(m))*(m))
#define normalize(a)		(a)/length(a)
#define lengthSqr(p)		dp(p,p)
#define pii			pair<int,int>
#define V			vector
#define MP			make_pair
#define X			real()
#define Y			imag()

typedef complex<double> 	point;
typedef long long ll;

const double PI = acos(-1.0);
const double EPS = 1e-10;
const ll mod = ll(1e9 + 7), oo = ll(1e9);

V<V<pii> > adj;
int n, m, k, t, c;
int g[22][22];

void shortestpath(){
	for (int k = 0; k < n; k++){
		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++){
				g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
			}
		}
	}
}

int dp[22][(1 << 20) + 1];
int go(int src, int sub){

	if (sub == 0)
		return dp[src][sub] = 0;

	int &ret = dp[src][sub];
	if (ret != -1) return ret;
	ret = oo;
	for (int i = 0; i < n; i++){
		if (!((sub >> i) & 1)) continue;
		ret = min(ret, go(i, (sub & ~(1 << i))) + g[src][i]);
	}
	return ret;
}
int get(int src, int sub){
	if (sub == 0)
		return src;
	for (int i = 0; i < n; i++){
		if (!((sub >> i) & 1)) continue;
		if (dp[i][(sub & ~(1 << i))] + g[src][i] == dp[src][sub]){
			return get(i, (sub & ~(1 << i)));
		}
	}
	assert(1);
	return 0; // doesn't matter
}
int er(int msk, int i){
	return (msk & ~(1 << i));
}
int main()
{
	Emsawy();
	while (cin >> n >> m){
		int u, v, w;
		for (int i = 0; i < n; i++) for (int j = 0; j < n; j++)g[i][j] = oo;
		for (int i = 0; i < n; i++) g[i][i] = 0;
		for (int i = 0; i < m; i++){
			sf3(u, v, w);
			g[u][v] = min(g[u][v], w);
			g[v][u] = min(g[u][v], w);
		}
		shortestpath();
		clr(dp, -1);
		int src = 0, sink = n - 1, h = (n - 2) , fh = h / 2;
		int to = (1 << n), res = oo;
		for (int msk = 0; msk <= to; msk++){
			int cnt = 0 , mask = msk;
			mask = er(mask, src);
			mask = er(mask, sink);
			for (int j = 0; j < n; j++){
				cnt += ((mask >> j) & 1);
			}
			if (cnt != fh) continue;
			int a = go(src, mask), a0 = get(src, mask);
			int b = go(a0, er(er(~mask & (to - 1), src), sink)), b0 = get(a0, er(er(~mask & (to - 1), src), sink));
			int c = g[b0][sink];
			int d = go(sink , mask), d0 = get(sink, mask);
			int e = go(d0, er(er(~mask & (to - 1), src), sink)), e0 = get(d0, er(er(~mask & (to - 1), src), sink));
			int f = g[e0][src];
			int now = a + b + c + d + e + f;
			res = min(res, now);
		}
		printf("Case %d: %d\n", ++c, res);
	}
	return 0;
}
