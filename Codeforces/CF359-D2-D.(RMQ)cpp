#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;
void Emsawy(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

#define sz(v)			((int)((v).size()))
#define all(v)			((v).begin()), ((v).end())
#define allr(v)			((v).rbegin()), ((v).rend())
#define clr(v,d)		memset(v, d, sizeof(v))
#define sf(x)			scanf("%d", &x)
#define sf2(x,y)		scanf("%d %d", &x, &y)
#define sf3(x,y,z)		scanf("%d %d %d", &x, &y, &z)
#define sfll(x)			scanf("%I64d", &x)
#define sfll2(x,y)		scanf("%I64d %I64d", &x, &y)
#define sfll3(x,y,z)		scanf("%I64d %I64d %I64d", &x, &y, &z)
#define angle(a)		(atan2((a).imag(), (a).real()))
#define vec(a,b)		((b)-(a))
#define length(a)		(hypot((a).imag(), (a).real()))
#define dp(a,b)			((conj(a)*(b)).real()) // if zero prep
#define cp(a,b)			((conj(a)*(b)).imag()) // if zero parl
#define same(p1,p2)		(dp(vec(p1,p2),vec(p1,p2)) <= EPS)
#define rotate0(p,ang)		((p)*exp(Point(0,ang)))
#define rotateA(p,ang,about)	(rotate0(vec(about,p),ang)+about)
#define reflect0(v,m)		(conj((v)/(m))*(m))
#define normalize(a)		(a)/length(a)
#define lengthSqr(p)		dp(p,p)
#define pii			pair<int,int>
#define V			vector
#define MP			make_pair
#define X			real()
#define Y			imag()

typedef complex<double> 	point;
typedef long long ll;

const double PI = acos(-1.0);
const double EPS = 1e-10;
const ll mod = ll(1e9 + 7), oo = ll(1e9);

V<V<pii> > adj;
int n, m, k, t, c;
ll gcd(ll a, ll b){
	if (a == 0) return b;
	gcd(b  %a, a);
}

const int size = 300005;
int spMIN[size][20], in[size];
void RMQMIN(){
	for (int i = 0; i < n; i++)
		spMIN[i][0] = i;
	for (int j = 1; (1 << j) - 1 < n; j++){
		for (int i = 0; i + (1 << (j - 1)) < n; i++){
			if (in[spMIN[i][j - 1]] <= in[spMIN[i + (1 << (j - 1))][j - 1]])
				spMIN[i][j] = spMIN[i][j - 1];
			else
				spMIN[i][j] = spMIN[i + (1 << (j - 1))][j - 1];
		}
	}
}

int quaryMIN(int l, int r){
	int j = floor(log2((r - l + 1)));
	return min(in[spMIN[l][j]], in[spMIN[r - (1 << j) + 1][j]]);
}

int spGCD[size][20];
void RMQGCD(){
	for (int i = 0; i < n; i++)
		spGCD[i][0] = in[i];
	for (int j = 1; (1 << j) - 1 < n; j++){
		for (int i = 0; i + (1 << (j - 1)) < n; i++){
			spGCD[i][j] = gcd(spGCD[i][j - 1], spGCD[i + (1 << (j - 1))][j - 1]);
		}
	}
}

int quaryGCD(int l, int r){
	int j = floor(log2((r - l + 1)));
	return gcd(spGCD[l][j], spGCD[r - (1 << j) + 1][j]);
}

bool valid(int mid){
	for (int i = 0; i + mid < n; i++){
		if (quaryGCD(i, i + mid) == quaryMIN(i, i + mid)) 
			return 1;
	}
	return 0;
}
V<int>ans;
void get(int mid){
	ans.clear();
	for (int i = 0; i + mid < n; i++){
		if (quaryGCD(i, i + mid) == quaryMIN(i, i + mid)){
			ans.push_back(i);
		}
	}
}
int main()
{
	Emsawy();
	while (cin >> n){
		for (int i = 0; i < n; i++)
			cin >> in[i];
		RMQMIN();
		RMQGCD();
		//valid(4);
		int lo = 0, hi = n - 1, res = 1;
		while (lo <= hi){
			int mid = (lo + hi) / 2;
			if (valid(mid)) 
				lo = mid + 1, res = mid;
			else hi = mid - 1;
		}
		get(res);
		cout << ans.size() << " " << res << endl;
		for (auto it : ans)
			cout << it + 1 << " ";
		puts("");
	}
	return 0;
}
